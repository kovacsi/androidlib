apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'com.jfrog.bintray'

def artifact = new Properties()
artifact.load(project.file('deploy.properties').newDataInputStream())

version = System.env.TRAVIS_BUILD_NUMBER//artifact.version
group = artifact.groupId

install {
    repositories.mavenInstaller {
        pom.project {
            packaging 'aar'
            groupId artifact.groupId
            artifactId artifact.artifactId
            version version//artifact.version
            // pom.project.name must be same as bintray.pkg.name and MODULE NAME also
            name artifact.artifactId
            url artifact.siteUrl
            inceptionYear artifact.inceptionYear
            licenses {
                license {
                    name 'Apache-2.0'
                    url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    distribution 'repo'
                }
            }
            scm {
                connection artifact.gitUrl
                developerConnection artifact.gitUrl
                url artifact.siteUrl
            }
        }
    }
}

//Properties properties = new Properties()
//File propFile = "${System.properties['user.home']}${File.separator}.gradle${File.separator}bintray.properties" as File
//properties.load(propFile.newDataInputStream())

//def secret = new Properties()
//secret.load(project.file('bintray.properties').newDataInputStream())

bintray {
//    user = properties.getProperty("bintray.user")
//    key = properties.getProperty("bintray.apikey")

    println System.env.apikey
    println System.env.TRAVIS_BUILD_NUMBER

    user = 'kovacsi'//secret.user
    key = System.env.apikey//secret.apikey

    configurations = ['archives']
    pkg {
        repo = "maven"
        name = artifact.artifactId
        websiteUrl = artifact.siteUrl
        vcsUrl = artifact.gitUrl
        licenses = artifact.licenses
        publish = true
        version {
            name = version//System.env.TRAVIS_BUILD_NUMBER//artifact.version
        }
    }
}

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
    // options.encoding = 'UTF-8'
}

artifacts {
    archives javadocJar
    archives sourcesJar
}
